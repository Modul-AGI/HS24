{
  "hash": "956db78be90d4bc39703b86537438b9f",
  "result": {
    "engine": "jupyter",
    "markdown": "# Primitive Datentypen\n\nBei primitiven Datentypen handelt es sich um die kleinste Einheit der Programmiersprache, sie werden deshalb auch \"atomare Datentypen\" genannt. Alle komplexeren Datentypen (Tabellarische Daten, Bilder, Geodaten) basieren auf diesen einfachen Strukturen. Die für uns wichtigsten Datentypen lauten: *Boolean*, *String*, *Integer* und *Float*. Das sind ähnliche Datentypen wie ihr bereits aus R kennt:\n\n| Python | R | Beschreibung | Beispiel | in Python | \n|:---|:---|:---|:---|:---|\n| Boolean | Logical | Logische Werte ja / nein | Wahr / Falsch | `regen = True` |\n| String | Character | Textinformation | Bern, Luzern | `stadt = \"Bern\"` |\n| Integer | Integer | Zahl ohne Nachkommastelle | Anzahl Einwohner | `bern = 133115` |\n| Float | Double | Zahl mit Nachkommastelle | Temperatur | `temp = 22.5` |\n\n\n:::{#tip-positron-project .callout-tip}\n\n## Positron Projekt erstellen\n\nUm die nachfolgenden Codebeispiele selbst ausprobieren zu können, müsst ihr \n\n1. *Positron* starten\n2. In Positron ein neues Projekt erstellen (⨁ New → New Project → Python Project)\n   - Project Name: *Python_Code* (unser Vorschlag)\n   - Parent Directory: `Pfad\\zu\\deinem\\Modul-AGI-Kurs\\Programmieren1`\n3. Python Umgebung auswählen:\n   - *Use an existing Python installation* auswählen\n   - Python Interpreter: Hier die Umgebung *geopython1* suchen\n   - Klick *Create* → Current Window\n4. File direkt abspeichern: <kbd>Ctrl</kbd> + <kbd>S</kbd> (sinnvollen Namen mit endung `.py` geben)\n4. Im neuen Textfile Pythoncode schreiben\n5. Mit <kbd>Ctrl</kbd> + <kbd>Enter</kbd> Pythoncode ausführen\n:::\n\n\n## Boolean\n\nHierbei handelt es sich um den einfachsten Datentyp. Er beinhaltet nur zwei Zustände: *Wahr* oder *Falsch*. In Python werden diese mit `True` oder `False` definiert (diese Schreibweise muss genau beachtet werden). Beispielsweise sind das Antworten auf geschlossene Fragen.\n\n::: {#b258a0f1 .cell execution_count=1}\n``` {.python .cell-code}\nregen = True # \"es regnet\"\n\nsonne = False # \"die Sonne scheint nicht\"\n\ntype(sonne)\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\nbool\n```\n:::\n:::\n\n\nUm zu prüfen, ob ein bestimmter Wert `True` oder `False` ist verwendet man `is True`. Will man also fragen ob es regnet, wir dies folgendermassen formuliert:\n\n::: {#96cd7697 .cell execution_count=2}\n``` {.python .cell-code}\n# regnet es?\nregen is True\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\nTrue\n```\n:::\n:::\n\n\nOb die Sonne scheint, lautet folgendermassen (natürlich müssen dazu die Variabel `sonne` bereits existieren):\n\n::: {#c2e33c6b .cell execution_count=3}\n``` {.python .cell-code}\n# scheint die Sonne?\nsonne is True\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\nFalse\n```\n:::\n:::\n\n\n## String\n\nIn sogenannten *Strings* werden Textinformationen gespeichert. Beispielsweise können das die Namen von Ortschaften sein.\n\n::: {#a88024dd .cell execution_count=4}\n``` {.python .cell-code}\nstadt = \"Bern\"\nland = \"Schweiz\"\n\ntype(stadt)\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\nstr\n```\n:::\n:::\n\n\nStrings können mit `+` miteinander verbunden werden\n\n::: {#568294c1 .cell execution_count=5}\n``` {.python .cell-code}\nstadt + \" ist die Hauptstadt der \" + land\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\n'Bern ist die Hauptstadt der Schweiz'\n```\n:::\n:::\n\n\n## Integer\n\nIn *Integer* werden ganzzahlige Werte gespeichert, beispielsweise die Anzahl Einwohner einer Stadt. \n\n::: {#d7e77038 .cell execution_count=6}\n``` {.python .cell-code}\nbern_einwohner = 133115\n\ntype(bern_einwohner)\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\nint\n```\n:::\n:::\n\n\n## Float\n\nAls *Float* werden Zahlen mit Nachkommastellen gespeichert, wie zum Beispiel die Temperatur in Grad Celsius.\n\n::: {#cacd5def .cell execution_count=7}\n``` {.python .cell-code}\nbern_flaeche = 51.62\n\ntype(bern_flaeche)\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\nfloat\n```\n:::\n:::\n\n\n",
    "supporting": [
      "3_Primitive_Datentypen_files"
    ],
    "filters": [],
    "includes": {}
  }
}