{
  "hash": "393585477e91ef738a4500ac16650d80",
  "result": {
    "engine": "jupyter",
    "markdown": "# Räumliche Operationen {#sec-raeumliche-operationen}\n\nWas bringt uns diese *Geo* Erweiterung? Mit *GeoDataFrames* sind nun alle räumliche Operationen möglich, die wir bereits aus ArcGIS kennen aber mit einfachen *DataFrames* noch nicht möglich waren. Ich möchte dies an ein paar Beispielen Demonstrieren. Dazu müssen wir die Zeckenstiche in GeoDataFrame konvertiert und in ein Geopackage exportiert haben, wie in @sec-pythongis beschrieben.\n\n::: {#e2eba94b .cell execution_count=1}\n``` {.python .cell-code}\nimport geopandas as gpd\n\nzeckenstiche = gpd.read_file(\"data/zeckenstiche.gpkg\")\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">DataSourceError</span>                           Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[1], line 3</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">geopandas</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">gpd</span>\n<span class=\"ansi-green-fg\">----&gt; 3</span> zeckenstiche <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">gpd</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">read_file</span><span class=\"ansi-yellow-bg\">(</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">\"</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">data/zeckenstiche.gpkg</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">\"</span><span class=\"ansi-yellow-bg\">)</span>\n\nFile <span class=\"ansi-green-fg\">~/miniconda3/envs/modul-agi/lib/python3.12/site-packages/geopandas/io/file.py:294</span>, in <span class=\"ansi-cyan-fg\">_read_file</span><span class=\"ansi-blue-fg\">(filename, bbox, mask, columns, rows, engine, **kwargs)</span>\n<span class=\"ansi-green-fg ansi-bold\">    291</span>             from_bytes <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">True</span>\n<span class=\"ansi-green-fg ansi-bold\">    293</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> engine <span style=\"color:rgb(98,98,98)\">==</span> <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">pyogrio</span><span style=\"color:rgb(175,0,0)\">\"</span>:\n<span class=\"ansi-green-fg\">--&gt; 294</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> <span class=\"ansi-yellow-bg\">_read_file_pyogrio</span><span class=\"ansi-yellow-bg\">(</span>\n<span class=\"ansi-green-fg ansi-bold\">    295</span> <span class=\"ansi-yellow-bg\">        </span><span class=\"ansi-yellow-bg\">filename</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">bbox</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">bbox</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">mask</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">mask</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">columns</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">columns</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">rows</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">rows</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">*</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">*</span><span class=\"ansi-yellow-bg\">kwargs</span>\n<span class=\"ansi-green-fg ansi-bold\">    296</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">    298</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">elif</span> engine <span style=\"color:rgb(98,98,98)\">==</span> <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">fiona</span><span style=\"color:rgb(175,0,0)\">\"</span>:\n<span class=\"ansi-green-fg ansi-bold\">    299</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> pd<span style=\"color:rgb(98,98,98)\">.</span>api<span style=\"color:rgb(98,98,98)\">.</span>types<span style=\"color:rgb(98,98,98)\">.</span>is_file_like(filename):\n\nFile <span class=\"ansi-green-fg\">~/miniconda3/envs/modul-agi/lib/python3.12/site-packages/geopandas/io/file.py:547</span>, in <span class=\"ansi-cyan-fg\">_read_file_pyogrio</span><span class=\"ansi-blue-fg\">(path_or_bytes, bbox, mask, rows, **kwargs)</span>\n<span class=\"ansi-green-fg ansi-bold\">    538</span>     warnings<span style=\"color:rgb(98,98,98)\">.</span>warn(\n<span class=\"ansi-green-fg ansi-bold\">    539</span>         <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">The </span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">include_fields</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\"> and </span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">ignore_fields</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\"> keywords are deprecated, and </span><span style=\"color:rgb(175,0,0)\">\"</span>\n<span class=\"ansi-green-fg ansi-bold\">    540</span>         <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">will be removed in a future release. You can use the </span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">columns</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\"> keyword </span><span style=\"color:rgb(175,0,0)\">\"</span>\n<span class=\"ansi-green-fg\">   (...)</span>\n<span class=\"ansi-green-fg ansi-bold\">    543</span>         stacklevel<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">3</span>,\n<span class=\"ansi-green-fg ansi-bold\">    544</span>     )\n<span class=\"ansi-green-fg ansi-bold\">    545</span>     kwargs[<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">columns</span><span style=\"color:rgb(175,0,0)\">\"</span>] <span style=\"color:rgb(98,98,98)\">=</span> kwargs<span style=\"color:rgb(98,98,98)\">.</span>pop(<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">include_fields</span><span style=\"color:rgb(175,0,0)\">\"</span>)\n<span class=\"ansi-green-fg\">--&gt; 547</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> <span class=\"ansi-yellow-bg\">pyogrio</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">read_dataframe</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">path_or_bytes</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">bbox</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">bbox</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">*</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">*</span><span class=\"ansi-yellow-bg\">kwargs</span><span class=\"ansi-yellow-bg\">)</span>\n\nFile <span class=\"ansi-green-fg\">~/miniconda3/envs/modul-agi/lib/python3.12/site-packages/pyogrio/geopandas.py:261</span>, in <span class=\"ansi-cyan-fg\">read_dataframe</span><span class=\"ansi-blue-fg\">(path_or_buffer, layer, encoding, columns, read_geometry, force_2d, skip_features, max_features, where, bbox, mask, fids, sql, sql_dialect, fid_as_index, use_arrow, on_invalid, arrow_to_pandas_kwargs, **kwargs)</span>\n<span class=\"ansi-green-fg ansi-bold\">    256</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> <span style=\"font-weight:bold;color:rgb(175,0,255)\">not</span> use_arrow:\n<span class=\"ansi-green-fg ansi-bold\">    257</span>     <span style=\"font-style:italic;color:rgb(95,135,135)\"># For arrow, datetimes are read as is.</span>\n<span class=\"ansi-green-fg ansi-bold\">    258</span>     <span style=\"font-style:italic;color:rgb(95,135,135)\"># For numpy IO, datetimes are read as string values to preserve timezone info</span>\n<span class=\"ansi-green-fg ansi-bold\">    259</span>     <span style=\"font-style:italic;color:rgb(95,135,135)\"># as numpy does not directly support timezones.</span>\n<span class=\"ansi-green-fg ansi-bold\">    260</span>     kwargs[<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">datetime_as_string</span><span style=\"color:rgb(175,0,0)\">\"</span>] <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">True</span>\n<span class=\"ansi-green-fg\">--&gt; 261</span> result <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">read_func</span><span class=\"ansi-yellow-bg\">(</span>\n<span class=\"ansi-green-fg ansi-bold\">    262</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">path_or_buffer</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    263</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">layer</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">layer</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    264</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">encoding</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">encoding</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    265</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">columns</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">columns</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    266</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">read_geometry</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">read_geometry</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    267</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">force_2d</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">gdal_force_2d</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    268</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">skip_features</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">skip_features</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    269</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">max_features</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">max_features</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    270</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">where</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">where</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    271</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">bbox</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">bbox</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    272</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">mask</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">mask</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    273</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">fids</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">fids</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    274</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">sql</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">sql</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    275</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">sql_dialect</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">sql_dialect</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    276</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">return_fids</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">fid_as_index</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    277</span> <span class=\"ansi-yellow-bg\">    </span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">*</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">*</span><span class=\"ansi-yellow-bg\">kwargs</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    278</span> <span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">    280</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> use_arrow:\n<span class=\"ansi-green-fg ansi-bold\">    281</span>     meta, table <span style=\"color:rgb(98,98,98)\">=</span> result\n\nFile <span class=\"ansi-green-fg\">~/miniconda3/envs/modul-agi/lib/python3.12/site-packages/pyogrio/raw.py:196</span>, in <span class=\"ansi-cyan-fg\">read</span><span class=\"ansi-blue-fg\">(path_or_buffer, layer, encoding, columns, read_geometry, force_2d, skip_features, max_features, where, bbox, mask, fids, sql, sql_dialect, return_fids, datetime_as_string, **kwargs)</span>\n<span class=\"ansi-green-fg ansi-bold\">     56</span> <span style=\"font-style:italic;color:rgb(175,0,0)\">\"\"\"Read OGR data source into numpy arrays.</span>\n<span class=\"ansi-green-fg ansi-bold\">     57</span> \n<span class=\"ansi-green-fg ansi-bold\">     58</span> <span style=\"font-style:italic;color:rgb(175,0,0)\">IMPORTANT: non-linear geometry types (e.g., MultiSurface) are converted</span>\n<span class=\"ansi-green-fg\">   (...)</span>\n<span class=\"ansi-green-fg ansi-bold\">    191</span> \n<span class=\"ansi-green-fg ansi-bold\">    192</span> <span style=\"font-style:italic;color:rgb(175,0,0)\">\"\"\"</span>\n<span class=\"ansi-green-fg ansi-bold\">    194</span> dataset_kwargs <span style=\"color:rgb(98,98,98)\">=</span> _preprocess_options_key_value(kwargs) <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> kwargs <span style=\"font-weight:bold;color:rgb(0,135,0)\">else</span> {}\n<span class=\"ansi-green-fg\">--&gt; 196</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> <span class=\"ansi-yellow-bg\">ogr_read</span><span class=\"ansi-yellow-bg\">(</span>\n<span class=\"ansi-green-fg ansi-bold\">    197</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">get_vsi_path_or_buffer</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">path_or_buffer</span><span class=\"ansi-yellow-bg\">)</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    198</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">layer</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">layer</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    199</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">encoding</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">encoding</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    200</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">columns</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">columns</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    201</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">read_geometry</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">read_geometry</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    202</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">force_2d</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">force_2d</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    203</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">skip_features</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">skip_features</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    204</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">max_features</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">max_features</span><span class=\"ansi-yellow-bg\"> </span><span style=\"font-weight:bold;color:rgb(175,0,255)\" class=\"ansi-yellow-bg\">or</span><span class=\"ansi-yellow-bg\"> </span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">0</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    205</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">where</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">where</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    206</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">bbox</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">bbox</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    207</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">mask</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">_mask_to_wkb</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">mask</span><span class=\"ansi-yellow-bg\">)</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    208</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">fids</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">fids</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    209</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">sql</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">sql</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    210</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">sql_dialect</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">sql_dialect</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    211</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">return_fids</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">return_fids</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    212</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">dataset_kwargs</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">dataset_kwargs</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    213</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">datetime_as_string</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">datetime_as_string</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    214</span> <span class=\"ansi-yellow-bg\">)</span>\n\nFile <span class=\"ansi-green-fg\">~/miniconda3/envs/modul-agi/lib/python3.12/site-packages/pyogrio/_io.pyx:1239</span>, in <span class=\"ansi-cyan-fg\">pyogrio._io.ogr_read</span><span class=\"ansi-blue-fg\">()</span>\n\nFile <span class=\"ansi-green-fg\">~/miniconda3/envs/modul-agi/lib/python3.12/site-packages/pyogrio/_io.pyx:219</span>, in <span class=\"ansi-cyan-fg\">pyogrio._io.ogr_open</span><span class=\"ansi-blue-fg\">()</span>\n\n<span class=\"ansi-red-fg\">DataSourceError</span>: data/zeckenstiche.gpkg: No such file or directory</pre>\n```\n:::\n\n:::\n:::\n\n\n:::{.callout-note}\n\n- Die verschiedenen räumlichen Operationen in Geopandas erwarten unterschiedlichen Input, deshalb müssen wir manchmal zwischen *Geometrien*, *Geoseries* und *GeoDataFrames* hin- und her konvertieren (siehe @sec-pythongis-datenstruktur). \n- Welcher Datentyp eure Operation *braucht* seht ihr in [der Dokumentation](https://geopandas.org/). Welcher Datentyp ihr *habt* seht ihr mit `type()`.\n- Um ein Objekt von einem Format in das andere zu konvertieren (angenommen das Objekt heisst `x`)\n\n::: {#dfcdb166 .cell execution_count=2}\n``` {.python .cell-code}\n# von GeoDataFrame zu Geoseries:\nzecken_geoseries = gpd.GeoSeries(zeckenstiche[\"geometry\"])          \n\n# von GeoSeries zurück zu GeoDataFrame:\nzecken_geodataframe = gpd.GeoDataFrame(geometry = zecken_geoseries) \n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[2], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># von GeoDataFrame zu Geoseries:</span>\n<span class=\"ansi-green-fg\">----&gt; 2</span> zecken_geoseries <span style=\"color:rgb(98,98,98)\">=</span> gpd<span style=\"color:rgb(98,98,98)\">.</span>GeoSeries(<span class=\"ansi-yellow-bg\">zeckenstiche</span>[<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">geometry</span><span style=\"color:rgb(175,0,0)\">\"</span>])          \n<span class=\"ansi-green-fg ansi-bold\">      4</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># von GeoSeries zurück zu GeoDataFrame:</span>\n<span class=\"ansi-green-fg ansi-bold\">      5</span> zecken_geodataframe <span style=\"color:rgb(98,98,98)\">=</span> gpd<span style=\"color:rgb(98,98,98)\">.</span>GeoDataFrame(geometry <span style=\"color:rgb(98,98,98)\">=</span> zecken_geoseries) \n\n<span class=\"ansi-red-fg\">NameError</span>: name 'zeckenstiche' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n:::\n\n## Buffer\n\nEine typische GIS Operation ist das \"Buffern\" von Objekten. Der ArcGIS Befehl [\"Buffer\"](https://pro.arcgis.com/en/pro-app/tool-reference/analysis/buffer.htm) erreichen wir in Geopandas mit `.buffer()`. Folgender Code macht einen Buffer mit einer Distanz von 10m. \n\n::: {#e7bc5faf .cell execution_count=3}\n``` {.python .cell-code}\nbuffered = zeckenstiche.buffer(10) \n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[3], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> buffered <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">zeckenstiche</span><span style=\"color:rgb(98,98,98)\">.</span>buffer(<span style=\"color:rgb(98,98,98)\">10</span>) \n\n<span class=\"ansi-red-fg\">NameError</span>: name 'zeckenstiche' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nUm Geopandas-Objekte zu plotten kann man einfach `.plot()` verwenden. Zudem kann man mit `boundary` die Umrisse eines Polygons extrahieren:\n\n::: {#b83dd509 .cell execution_count=4}\n``` {.python .cell-code}\nbase = buffered.boundary.plot() # plottet die boundries    \n\nzeckenstiche.plot(ax = base, color = \"black\") # plottet die Punkte\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[4], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> base <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">buffered</span><span style=\"color:rgb(98,98,98)\">.</span>boundary<span style=\"color:rgb(98,98,98)\">.</span>plot() <span style=\"font-style:italic;color:rgb(95,135,135)\"># plottet die boundries    </span>\n<span class=\"ansi-green-fg ansi-bold\">      3</span> zeckenstiche<span style=\"color:rgb(98,98,98)\">.</span>plot(ax <span style=\"color:rgb(98,98,98)\">=</span> base, color <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">black</span><span style=\"color:rgb(175,0,0)\">\"</span>) <span style=\"font-style:italic;color:rgb(95,135,135)\"># plottet die Punkte</span>\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'buffered' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n## Union\n\nMit `unary_union` können wir aus unserer *Point*-Geometrie ein *MultiPoint* erstellen (siehe @sec-pythongis-datenstruktur). Dieser Befehl lautet in ArcGIS [Union](https://desktop.arcgis.com/de/arcmap/10.3/tools/analysis-toolbox/union.htm).\n\n::: {#044e047c .cell execution_count=5}\n``` {.python .cell-code}\nzeckenstiche_union = zeckenstiche[\"geometry\"].unary_union\n\ntype(zeckenstiche_union) # Es handelt sich nun um den Typ \"MultiPoint\"\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[5], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> zeckenstiche_union <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">zeckenstiche</span>[<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">geometry</span><span style=\"color:rgb(175,0,0)\">\"</span>]<span style=\"color:rgb(98,98,98)\">.</span>unary_union\n<span class=\"ansi-green-fg ansi-bold\">      3</span> <span style=\"color:rgb(0,135,0)\">type</span>(zeckenstiche_union) <span style=\"font-style:italic;color:rgb(95,135,135)\"># Es handelt sich nun um den Typ \"MultiPoint\"</span>\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'zeckenstiche' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nWenn wir uns `zeckenstiche_union` nun mit `print` anschauen sehen wir, dass sämtliche Koordinaten in einem Objekt zusammengepackt sind: \n\n::: {#7b171f7b .cell execution_count=6}\n``` {.python .cell-code}\nprint(zeckenstiche_union)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[6], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span style=\"color:rgb(0,135,0)\">print</span>(<span class=\"ansi-yellow-bg\">zeckenstiche_union</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'zeckenstiche_union' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n## Minimum Bounding Geometry {#sec-raeumliche-operationen-mbg}\n\nÜber ein *MultiPoint* lassen sich jetzt wunderbar sogenannte (in ESRI Terminologie) [Minimum Bounding Geometries](https://pro.arcgis.com/de/pro-app/tool-reference/data-management/minimum-bounding-geometry.htm) rechnen. Mit den gleichnamigen Funktionen können wir nun eine `convex_hull` [^convex-hull] sowie eine `envelope` [^envelope] über alle Punkte rechnen.\n\n[^convex-hull]:  Convex Hull stellt ein \"Rahmen\" um alle Punkte dar, wo alle Innenwinkel kleiner sind als 180° (*konvex*)\n[^envelope]: Envelope stellt ebenfalls ein \"Rahmen um alle Punkte dar, die aber quadratisch geformt und am Koordiatensystem ausgerichtet ist.\n\n::: {#4290b98f .cell execution_count=7}\n``` {.python .cell-code}\nmy_convex_hull = zeckenstiche_union.convex_hull\nmy_envelope = zeckenstiche_union.envelope\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[7], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> my_convex_hull <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">zeckenstiche_union</span><span style=\"color:rgb(98,98,98)\">.</span>convex_hull\n<span class=\"ansi-green-fg ansi-bold\">      2</span> my_envelope <span style=\"color:rgb(98,98,98)\">=</span> zeckenstiche_union<span style=\"color:rgb(98,98,98)\">.</span>envelope\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'zeckenstiche_union' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nNun konvertiere ich beide Polygon-Geometrien in *GeoSeries*, damit sie einfacher zu visualisieren sind:\n\n::: {#5287291e .cell execution_count=8}\n``` {.python .cell-code}\nmy_convex_hull = gpd.GeoSeries(my_convex_hull)\nmy_envelope = gpd.GeoSeries(my_envelope)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[8], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> my_convex_hull <span style=\"color:rgb(98,98,98)\">=</span> gpd<span style=\"color:rgb(98,98,98)\">.</span>GeoSeries(<span class=\"ansi-yellow-bg\">my_convex_hull</span>)\n<span class=\"ansi-green-fg ansi-bold\">      2</span> my_envelope <span style=\"color:rgb(98,98,98)\">=</span> gpd<span style=\"color:rgb(98,98,98)\">.</span>GeoSeries(my_envelope)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'my_convex_hull' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nUm die beiden Objekte nebeneinander zu visualisieren importiere ich zuerst `pyplot` aus `matplotlib` (mit dem alias `plt`) und erstelle `subplots`\n\n::: {#ecf4c7a2 .cell execution_count=9}\n``` {.python .cell-code}\nfrom matplotlib import pyplot as plt\nfig, (ax1, ax2) = plt.subplots(1, 2,sharex=True, sharey = True,figsize = (9, 9))\n\n# Erstellt den linken Plot\nmy_convex_hull.plot(ax = ax1)\nax1.set_title(\"Convex Hull\")\nzeckenstiche.plot(ax = ax1, color = \"black\")\n\n# Erstellt den rechten Plot\nmy_envelope.plot(ax = ax2)\nax2.set_title(\"Envelope\")\nzeckenstiche.plot(ax = ax2, color = \"black\")\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[9], line 5</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> fig, (ax1, ax2) <span style=\"color:rgb(98,98,98)\">=</span> plt<span style=\"color:rgb(98,98,98)\">.</span>subplots(<span style=\"color:rgb(98,98,98)\">1</span>, <span style=\"color:rgb(98,98,98)\">2</span>,sharex<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">True</span>, sharey <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">True</span>,figsize <span style=\"color:rgb(98,98,98)\">=</span> (<span style=\"color:rgb(98,98,98)\">9</span>, <span style=\"color:rgb(98,98,98)\">9</span>))\n<span class=\"ansi-green-fg ansi-bold\">      4</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Erstellt den linken Plot</span>\n<span class=\"ansi-green-fg\">----&gt; 5</span> <span class=\"ansi-yellow-bg\">my_convex_hull</span><span style=\"color:rgb(98,98,98)\">.</span>plot(ax <span style=\"color:rgb(98,98,98)\">=</span> ax1)\n<span class=\"ansi-green-fg ansi-bold\">      6</span> ax1<span style=\"color:rgb(98,98,98)\">.</span>set_title(<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">Convex Hull</span><span style=\"color:rgb(175,0,0)\">\"</span>)\n<span class=\"ansi-green-fg ansi-bold\">      7</span> zeckenstiche<span style=\"color:rgb(98,98,98)\">.</span>plot(ax <span style=\"color:rgb(98,98,98)\">=</span> ax1, color <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">black</span><span style=\"color:rgb(175,0,0)\">\"</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'my_convex_hull' is not defined</pre>\n```\n:::\n\n:::\n\n::: {.cell-output .cell-output-display}\n![](6_Raeumliche_Operationen_files/figure-html/cell-10-output-2.png){width=730 height=712}\n:::\n:::\n\n\n## Overlay\n\nViele der Funktionen aus dem ESRI Toolset [\"Overlay\"](https://pro.arcgis.com/de/pro-app/tool-reference/analysis/an-overview-of-the-overlay-toolset.htm) sind in der *Geopandas* Funktion `overlay` verpackt. Um sie zu demonstrieren nutze ich die Geometrien, die wir in weiter oben erstellt haben (`buffered` und `my_convex_hull`). Zuerst muss ich sie aber noch von *GeoSeries* in *GeoDataFrames* konverieren.\n\n::: {#16e07a6d .cell execution_count=10}\n``` {.python .cell-code}\nbuffered_gdf = gpd.GeoDataFrame(geometry = buffered, crs = 2056)               \nmy_convex_hull_gdf = gpd.GeoDataFrame(geometry = my_convex_hull, crs = 2056) \n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[10], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> buffered_gdf <span style=\"color:rgb(98,98,98)\">=</span> gpd<span style=\"color:rgb(98,98,98)\">.</span>GeoDataFrame(geometry <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">buffered</span>, crs <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(98,98,98)\">2056</span>)               \n<span class=\"ansi-green-fg ansi-bold\">      2</span> my_convex_hull_gdf <span style=\"color:rgb(98,98,98)\">=</span> gpd<span style=\"color:rgb(98,98,98)\">.</span>GeoDataFrame(geometry <span style=\"color:rgb(98,98,98)\">=</span> my_convex_hull, crs <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(98,98,98)\">2056</span>) \n\n<span class=\"ansi-red-fg\">NameError</span>: name 'buffered' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nNun kann ich zum beispielsweise die Overlay-Funktion `difference` ausführen:\n\n::: {#0b67a77b .cell execution_count=11}\n``` {.python .cell-code}\nmy_difference = gpd.overlay(my_convex_hull_gdf,buffered_gdf, how='difference')\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[11], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> my_difference <span style=\"color:rgb(98,98,98)\">=</span> gpd<span style=\"color:rgb(98,98,98)\">.</span>overlay(<span class=\"ansi-yellow-bg\">my_convex_hull_gdf</span>,buffered_gdf, how<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">difference</span><span style=\"color:rgb(175,0,0)\">'</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'my_convex_hull_gdf' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#4d17142f .cell execution_count=12}\n``` {.python .cell-code}\n# Bereitet die drei Subplots vor ################\nfig, (ax1, ax2, ax3) = plt.subplots(1, 3, sharex=True, sharey = True, figsize = (9,9))\n#################################################\n\n# Plot links ####################################\nmy_convex_hull_gdf.plot(ax = ax1)               #\nax1.set_title(\"1. Das Minimum Convex Polygon\")  # \nax1.set_axis_off()                              #\n# Plot mitte ####################################\nbuffered_gdf.plot(ax = ax2)                     #\nax2.set_title(\"2. Die gebufferten Punkte\")      # \nax2.set_axis_off()                              #\n# Plot rechts ###################################\nmy_difference.plot(ax = ax3)                    #\nax3.set_title(\"Differenz aus 1. & 2.\")          # \nax3.set_axis_off()                              #\n#################################################\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[12], line 6</span>\n<span class=\"ansi-green-fg ansi-bold\">      2</span> fig, (ax1, ax2, ax3) <span style=\"color:rgb(98,98,98)\">=</span> plt<span style=\"color:rgb(98,98,98)\">.</span>subplots(<span style=\"color:rgb(98,98,98)\">1</span>, <span style=\"color:rgb(98,98,98)\">3</span>, sharex<span style=\"color:rgb(98,98,98)\">=</span><span style=\"font-weight:bold;color:rgb(0,135,0)\">True</span>, sharey <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">True</span>, figsize <span style=\"color:rgb(98,98,98)\">=</span> (<span style=\"color:rgb(98,98,98)\">9</span>,<span style=\"color:rgb(98,98,98)\">9</span>))\n<span class=\"ansi-green-fg ansi-bold\">      3</span> <span style=\"font-style:italic;color:rgb(95,135,135)\">#################################################</span>\n<span class=\"ansi-green-fg ansi-bold\">      4</span> \n<span class=\"ansi-green-fg ansi-bold\">      5</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Plot links ####################################</span>\n<span class=\"ansi-green-fg\">----&gt; 6</span> <span class=\"ansi-yellow-bg\">my_convex_hull_gdf</span><span style=\"color:rgb(98,98,98)\">.</span>plot(ax <span style=\"color:rgb(98,98,98)\">=</span> ax1)               <span style=\"font-style:italic;color:rgb(95,135,135)\">#</span>\n<span class=\"ansi-green-fg ansi-bold\">      7</span> ax1<span style=\"color:rgb(98,98,98)\">.</span>set_title(<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">1. Das Minimum Convex Polygon</span><span style=\"color:rgb(175,0,0)\">\"</span>)  <span style=\"font-style:italic;color:rgb(95,135,135)\"># </span>\n<span class=\"ansi-green-fg ansi-bold\">      8</span> ax1<span style=\"color:rgb(98,98,98)\">.</span>set_axis_off()                              <span style=\"font-style:italic;color:rgb(95,135,135)\">#</span>\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'my_convex_hull_gdf' is not defined</pre>\n```\n:::\n\n:::\n\n::: {.cell-output .cell-output-display}\n![](6_Raeumliche_Operationen_files/figure-html/cell-13-output-2.png){width=734 height=712}\n:::\n:::\n\n\n",
    "supporting": [
      "6_Raeumliche_Operationen_files"
    ],
    "filters": [],
    "includes": {}
  }
}