{
  "hash": "d7daa6ea98fc17422f868cdae8c831ea",
  "result": {
    "engine": "jupyter",
    "markdown": "# Spatial Joins {#sec-spatialjoin}\n\nIn dieser Aufgabe wollen wir für jeden Zeckenstich ermitteln, ob er sich im Wald befindet oder nicht. Den Wald Layer kennt ihr bereits aus dem Block \"Datenqualität und Unsicherheit\" und wir haben ihn in @sec-pythongis-formate kurz angeschaut. Nutzen wir hier nochmal die Gelegenheit, um den Wald und die Zeckenstiche (siehe @tbl-datensaetze) als Geodaten einzulesen und in einer grossem Plot zu visualisieren.\n\n::: {#f11eff7e .cell execution_count=1}\n``` {.python .cell-code}\nimport geopandas as gpd\n\nzeckenstiche_gpd = gpd.read_file(\"data/zeckenstiche.gpkg\")\nwald = gpd.read_file(\"data/wald.gpkg\")\n\nminx, miny, maxx, maxy = zeckenstiche_gpd.geometry.total_bounds  # holt die x und y min bzw. max werte und speichert diese in 4 variabeln\n\nfrom matplotlib.colors import ListedColormap\n\nbase = wald.plot(column = \"Wald_text\", legend = True, cmap = ListedColormap([\"green\",\"lightgrey\"]))\nzeckenstiche_gpd.plot(color = \"Red\", ax = base)\n\nbase.set_xlim(minx - 10, maxx + 10) \nbase.set_ylim(miny - 5, maxy + 5)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">DataSourceError</span>                           Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[1], line 3</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">geopandas</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> <span style=\"font-weight:bold;color:rgb(0,0,255)\">gpd</span>\n<span class=\"ansi-green-fg\">----&gt; 3</span> zeckenstiche_gpd <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">gpd</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">read_file</span><span class=\"ansi-yellow-bg\">(</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">\"</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">data/zeckenstiche.gpkg</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">\"</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">      4</span> wald <span style=\"color:rgb(98,98,98)\">=</span> gpd<span style=\"color:rgb(98,98,98)\">.</span>read_file(<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">data/wald.gpkg</span><span style=\"color:rgb(175,0,0)\">\"</span>)\n<span class=\"ansi-green-fg ansi-bold\">      6</span> minx, miny, maxx, maxy <span style=\"color:rgb(98,98,98)\">=</span> zeckenstiche_gpd<span style=\"color:rgb(98,98,98)\">.</span>geometry<span style=\"color:rgb(98,98,98)\">.</span>total_bounds  <span style=\"font-style:italic;color:rgb(95,135,135)\"># holt die x und y min bzw. max werte und speichert diese in 4 variabeln</span>\n\nFile <span class=\"ansi-green-fg\">~/miniconda3/envs/modul-agi/lib/python3.12/site-packages/geopandas/io/file.py:294</span>, in <span class=\"ansi-cyan-fg\">_read_file</span><span class=\"ansi-blue-fg\">(filename, bbox, mask, columns, rows, engine, **kwargs)</span>\n<span class=\"ansi-green-fg ansi-bold\">    291</span>             from_bytes <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">True</span>\n<span class=\"ansi-green-fg ansi-bold\">    293</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> engine <span style=\"color:rgb(98,98,98)\">==</span> <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">pyogrio</span><span style=\"color:rgb(175,0,0)\">\"</span>:\n<span class=\"ansi-green-fg\">--&gt; 294</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> <span class=\"ansi-yellow-bg\">_read_file_pyogrio</span><span class=\"ansi-yellow-bg\">(</span>\n<span class=\"ansi-green-fg ansi-bold\">    295</span> <span class=\"ansi-yellow-bg\">        </span><span class=\"ansi-yellow-bg\">filename</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">bbox</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">bbox</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">mask</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">mask</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">columns</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">columns</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">rows</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">rows</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">*</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">*</span><span class=\"ansi-yellow-bg\">kwargs</span>\n<span class=\"ansi-green-fg ansi-bold\">    296</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">    298</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">elif</span> engine <span style=\"color:rgb(98,98,98)\">==</span> <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">fiona</span><span style=\"color:rgb(175,0,0)\">\"</span>:\n<span class=\"ansi-green-fg ansi-bold\">    299</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> pd<span style=\"color:rgb(98,98,98)\">.</span>api<span style=\"color:rgb(98,98,98)\">.</span>types<span style=\"color:rgb(98,98,98)\">.</span>is_file_like(filename):\n\nFile <span class=\"ansi-green-fg\">~/miniconda3/envs/modul-agi/lib/python3.12/site-packages/geopandas/io/file.py:547</span>, in <span class=\"ansi-cyan-fg\">_read_file_pyogrio</span><span class=\"ansi-blue-fg\">(path_or_bytes, bbox, mask, rows, **kwargs)</span>\n<span class=\"ansi-green-fg ansi-bold\">    538</span>     warnings<span style=\"color:rgb(98,98,98)\">.</span>warn(\n<span class=\"ansi-green-fg ansi-bold\">    539</span>         <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">The </span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">include_fields</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\"> and </span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">ignore_fields</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\"> keywords are deprecated, and </span><span style=\"color:rgb(175,0,0)\">\"</span>\n<span class=\"ansi-green-fg ansi-bold\">    540</span>         <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">will be removed in a future release. You can use the </span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">columns</span><span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\"> keyword </span><span style=\"color:rgb(175,0,0)\">\"</span>\n<span class=\"ansi-green-fg\">   (...)</span>\n<span class=\"ansi-green-fg ansi-bold\">    543</span>         stacklevel<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(98,98,98)\">3</span>,\n<span class=\"ansi-green-fg ansi-bold\">    544</span>     )\n<span class=\"ansi-green-fg ansi-bold\">    545</span>     kwargs[<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">columns</span><span style=\"color:rgb(175,0,0)\">\"</span>] <span style=\"color:rgb(98,98,98)\">=</span> kwargs<span style=\"color:rgb(98,98,98)\">.</span>pop(<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">include_fields</span><span style=\"color:rgb(175,0,0)\">\"</span>)\n<span class=\"ansi-green-fg\">--&gt; 547</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> <span class=\"ansi-yellow-bg\">pyogrio</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">read_dataframe</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">path_or_bytes</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">bbox</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">bbox</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">*</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">*</span><span class=\"ansi-yellow-bg\">kwargs</span><span class=\"ansi-yellow-bg\">)</span>\n\nFile <span class=\"ansi-green-fg\">~/miniconda3/envs/modul-agi/lib/python3.12/site-packages/pyogrio/geopandas.py:261</span>, in <span class=\"ansi-cyan-fg\">read_dataframe</span><span class=\"ansi-blue-fg\">(path_or_buffer, layer, encoding, columns, read_geometry, force_2d, skip_features, max_features, where, bbox, mask, fids, sql, sql_dialect, fid_as_index, use_arrow, on_invalid, arrow_to_pandas_kwargs, **kwargs)</span>\n<span class=\"ansi-green-fg ansi-bold\">    256</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> <span style=\"font-weight:bold;color:rgb(175,0,255)\">not</span> use_arrow:\n<span class=\"ansi-green-fg ansi-bold\">    257</span>     <span style=\"font-style:italic;color:rgb(95,135,135)\"># For arrow, datetimes are read as is.</span>\n<span class=\"ansi-green-fg ansi-bold\">    258</span>     <span style=\"font-style:italic;color:rgb(95,135,135)\"># For numpy IO, datetimes are read as string values to preserve timezone info</span>\n<span class=\"ansi-green-fg ansi-bold\">    259</span>     <span style=\"font-style:italic;color:rgb(95,135,135)\"># as numpy does not directly support timezones.</span>\n<span class=\"ansi-green-fg ansi-bold\">    260</span>     kwargs[<span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">datetime_as_string</span><span style=\"color:rgb(175,0,0)\">\"</span>] <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">True</span>\n<span class=\"ansi-green-fg\">--&gt; 261</span> result <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">read_func</span><span class=\"ansi-yellow-bg\">(</span>\n<span class=\"ansi-green-fg ansi-bold\">    262</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">path_or_buffer</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    263</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">layer</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">layer</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    264</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">encoding</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">encoding</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    265</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">columns</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">columns</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    266</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">read_geometry</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">read_geometry</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    267</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">force_2d</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">gdal_force_2d</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    268</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">skip_features</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">skip_features</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    269</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">max_features</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">max_features</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    270</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">where</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">where</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    271</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">bbox</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">bbox</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    272</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">mask</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">mask</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    273</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">fids</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">fids</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    274</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">sql</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">sql</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    275</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">sql_dialect</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">sql_dialect</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    276</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">return_fids</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">fid_as_index</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    277</span> <span class=\"ansi-yellow-bg\">    </span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">*</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">*</span><span class=\"ansi-yellow-bg\">kwargs</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    278</span> <span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">    280</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> use_arrow:\n<span class=\"ansi-green-fg ansi-bold\">    281</span>     meta, table <span style=\"color:rgb(98,98,98)\">=</span> result\n\nFile <span class=\"ansi-green-fg\">~/miniconda3/envs/modul-agi/lib/python3.12/site-packages/pyogrio/raw.py:196</span>, in <span class=\"ansi-cyan-fg\">read</span><span class=\"ansi-blue-fg\">(path_or_buffer, layer, encoding, columns, read_geometry, force_2d, skip_features, max_features, where, bbox, mask, fids, sql, sql_dialect, return_fids, datetime_as_string, **kwargs)</span>\n<span class=\"ansi-green-fg ansi-bold\">     56</span> <span style=\"font-style:italic;color:rgb(175,0,0)\">\"\"\"Read OGR data source into numpy arrays.</span>\n<span class=\"ansi-green-fg ansi-bold\">     57</span> \n<span class=\"ansi-green-fg ansi-bold\">     58</span> <span style=\"font-style:italic;color:rgb(175,0,0)\">IMPORTANT: non-linear geometry types (e.g., MultiSurface) are converted</span>\n<span class=\"ansi-green-fg\">   (...)</span>\n<span class=\"ansi-green-fg ansi-bold\">    191</span> \n<span class=\"ansi-green-fg ansi-bold\">    192</span> <span style=\"font-style:italic;color:rgb(175,0,0)\">\"\"\"</span>\n<span class=\"ansi-green-fg ansi-bold\">    194</span> dataset_kwargs <span style=\"color:rgb(98,98,98)\">=</span> _preprocess_options_key_value(kwargs) <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> kwargs <span style=\"font-weight:bold;color:rgb(0,135,0)\">else</span> {}\n<span class=\"ansi-green-fg\">--&gt; 196</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> <span class=\"ansi-yellow-bg\">ogr_read</span><span class=\"ansi-yellow-bg\">(</span>\n<span class=\"ansi-green-fg ansi-bold\">    197</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">get_vsi_path_or_buffer</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">path_or_buffer</span><span class=\"ansi-yellow-bg\">)</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    198</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">layer</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">layer</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    199</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">encoding</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">encoding</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    200</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">columns</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">columns</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    201</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">read_geometry</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">read_geometry</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    202</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">force_2d</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">force_2d</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    203</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">skip_features</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">skip_features</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    204</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">max_features</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">max_features</span><span class=\"ansi-yellow-bg\"> </span><span style=\"font-weight:bold;color:rgb(175,0,255)\" class=\"ansi-yellow-bg\">or</span><span class=\"ansi-yellow-bg\"> </span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">0</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    205</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">where</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">where</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    206</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">bbox</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">bbox</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    207</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">mask</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">_mask_to_wkb</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">mask</span><span class=\"ansi-yellow-bg\">)</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    208</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">fids</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">fids</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    209</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">sql</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">sql</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    210</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">sql_dialect</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">sql_dialect</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    211</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">return_fids</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">return_fids</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    212</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">dataset_kwargs</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">dataset_kwargs</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    213</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">datetime_as_string</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">datetime_as_string</span><span class=\"ansi-yellow-bg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    214</span> <span class=\"ansi-yellow-bg\">)</span>\n\nFile <span class=\"ansi-green-fg\">~/miniconda3/envs/modul-agi/lib/python3.12/site-packages/pyogrio/_io.pyx:1239</span>, in <span class=\"ansi-cyan-fg\">pyogrio._io.ogr_read</span><span class=\"ansi-blue-fg\">()</span>\n\nFile <span class=\"ansi-green-fg\">~/miniconda3/envs/modul-agi/lib/python3.12/site-packages/pyogrio/_io.pyx:219</span>, in <span class=\"ansi-cyan-fg\">pyogrio._io.ogr_open</span><span class=\"ansi-blue-fg\">()</span>\n\n<span class=\"ansi-red-fg\">DataSourceError</span>: data/zeckenstiche.gpkg: No such file or directory</pre>\n```\n:::\n\n:::\n:::\n\n\n## Wie funktioniert ein *Spatial Join*?\n\nIn @sec-pythongis habt ihr euch mit den GIS-Funktionalitäten von `geopandas` vertraut gemacht. Eine ganz zentrale Funktion in GIS sind die sogenannten \"Spatial Joins\". Dabei werden Attribute von einem Geodatensatz auf einen anderen Geodatensatz aufgrund einer räumlichen Beziehung der beiden Datensätze übertragen. Konkret auf unsere Zeckenstiche bedeutet dies: Jedem Zeckenstich sollte die Eigenschaft \"Wald: ja\" / \"Wald: nein\" aus `wald zugewiesen werden. Am einfachsten lässt sich dies in einer Darstellung erklären:\n\n![\"Spatial Join\" zwischen `zeckenstiche` und `wald`. In diesem Spatial Join wurde die Geometrie von `zeckenstiche` übernommen, das heisst das Resultat des Joins ist ein Punkt-Layer.](figures/spatialjoin.jpg){#fig-spatialjoin}\n\nIn Python wird ein *Spatial Join* zwischen `zeckenstiche` und `wald` wie folgt durchgeführt (wichtig ist dabei auch die Reihenfolge der Argumente: `left_df` bestimmt den Geometrietyp des Outputs):\n\n::: {#737c6378 .cell execution_count=2}\n``` {.python .cell-code}\ngpd.sjoin(left_df = zeckenstiche_gpd, right_df = wald)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[2], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> gpd<span style=\"color:rgb(98,98,98)\">.</span>sjoin(left_df <span style=\"color:rgb(98,98,98)\">=</span> <span class=\"ansi-yellow-bg\">zeckenstiche_gpd</span>, right_df <span style=\"color:rgb(98,98,98)\">=</span> wald)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'zeckenstiche_gpd' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n",
    "supporting": [
      "7_Spatial_Joins_files"
    ],
    "filters": [],
    "includes": {}
  }
}